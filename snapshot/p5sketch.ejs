<html>
  <head>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.2/p5.js"></script>
    <script>
    
      function setup() {
        createCanvas(windowWidth, windowHeight, 'webgl')
        setAttributes('antialias', true)
        pixelDensity(3.0)
      }

      function draw() {
        colorMode(HSB)
        background(100)
        noStroke()
        ambientLight(0,0,100)
        pointLight(55, 255, 255, 250, 500, 100)

        if(Math.floor(<%= sliderValueMatte %>) === 0) {
          ambientMaterial(<%= sliderValueHue %>, 65, <%= sliderValueLightness %>, <%= sliderValueOpacity %>/100)
        } else {
          specularMaterial(<%= sliderValueHue %> , 65, <%= sliderValueLightness %>, <%= sliderValueOpacity %>/100)
        }

        rotateY(radians(<%= sliderValueRotY %>))
        rotateX(radians(<%= sliderValueRotX %>))
        rotateZ(radians(<%= sliderValueRotZ %>))

        <%if (shape.name == "box") {%>
          box(<%= sliderValueWidth %>, <%= sliderValueHeight %>, <%= sliderValueLength %>)
        <% } else if(shape.name == "cone") { %>
          cone(<%= sliderValueRadius %>, <%= sliderValueHeight %>, 50, 50);
        <% } else if(shape.name == "cylinder") { %>
          cylinder(<%= sliderValueRadius %>, <%= sliderValueHeight %>, 50, 50);
        <% } else if(shape.name == "dodecahedron") { %>
          scale(<%= sliderValueScale %>/10)
          let geom = new p5.Geometry
          parseObj(geom, dodecahedron)
          model(geom)
        <% } else if(shape.name == "ellipsoid") { %>
          ellipsoid(<%= sliderValueWidth %>, <%= sliderValueHeight %>, <%= sliderValueLength %>, 24, 24);
        <% } else if(shape.name == "plane") { %>
          plane(<%= sliderValueWidth %>, <%= sliderValueLength %>);
        <% } else if(shape.name == "icosahedron") { %>
          scale(<%= sliderValueScale %>/10)
          let geom = new p5.Geometry
          parseObj(geom, icosahedron)
          model(geom)
        <% } else if(shape.name == "torus") { %>
          torus(<%= sliderValueWidth %>, <%= sliderValueRadius %>, 50, 50)
        <% } else if(shape.name == "octahedron") { %>
          scale(<%= sliderValueScale %>/10)
          let geom = new p5.Geometry
          parseObj(geom, octahedron)
          model(geom)
        <% } else if(shape.name == "tetrahedron") { %>
          scale(<%= sliderValueScale %>/10)
          let geom = new p5.Geometry
          parseObj(geom, tetrahedron)
          model(geom)
        <% } %>
      }

      /* Helpers for servery-renderin' beyond this point, parseObj from p5-core & models from shape-mapper */

      function parseObj(model, lines) {
        var loadedVerts = {
          v: [],
          vt: [],
          vn: []
        };
        var indexedVerts = {};

        for (var line = 0; line < lines.length; ++line) {
          var tokens = lines[line].trim().split(/\b\s+/);

          if (tokens.length > 0) {
            if (tokens[0] === 'v' || tokens[0] === 'vn') {
              var vertex = new p5.Vector(
                parseFloat(tokens[1]),
                parseFloat(tokens[2]),
                parseFloat(tokens[3])
              );
              loadedVerts[tokens[0]].push(vertex);
            } else if (tokens[0] === 'vt') {
              var texVertex = [parseFloat(tokens[1]), parseFloat(tokens[2])];
              loadedVerts[tokens[0]].push(texVertex);
            } else if (tokens[0] === 'f') {
              for (var tri = 3; tri < tokens.length; ++tri) {
                var face = [];

                var vertexTokens = [1, tri - 1, tri];

                for (var tokenInd = 0; tokenInd < vertexTokens.length; ++tokenInd) {
                  var vertString = tokens[vertexTokens[tokenInd]];
                  var vertIndex = 0;

                  if (indexedVerts[vertString] !== undefined) {
                    vertIndex = indexedVerts[vertString];
                  } else {
                    var vertParts = vertString.split('/');
                    for (var i = 0; i < vertParts.length; i++) {
                      vertParts[i] = parseInt(vertParts[i]) - 1;
                    }

                    vertIndex = indexedVerts[vertString] = model.vertices.length;
                    model.vertices.push(loadedVerts.v[vertParts[0]].copy());
                    if (loadedVerts.vt[vertParts[1]]) {
                      model.uvs.push(loadedVerts.vt[vertParts[1]].slice());
                    } else {
                      model.uvs.push([0, 0]);
                    }

                    if (loadedVerts.vn[vertParts[2]]) {
                      model.vertexNormals.push(loadedVerts.vn[vertParts[2]].copy());
                    }
                  }

                  face.push(vertIndex);
                }

                if (
                  face[0] !== face[1] &&
                  face[0] !== face[2] &&
                  face[1] !== face[2]
                ) {
                  model.faces.push(face);
                }
              }
            }
          }
        }
        if (model.vertexNormals.length === 0) {
          model.computeNormals();
        }

        return model;
      }
      let dodecahedron = [
        "# 108 vertex positions",
        "v  5.7735 5.7735 5.7735",
        "v  3.56822 9.34172 0",
        "v  -5.7735 5.7735 5.7735",
        "v  -5.7735 5.7735 5.7735",
        "v  0 3.56822 9.34172",
        "v  5.7735 5.7735 5.7735",
        "v  3.56822 9.34172 0",
        "v  -3.56822 9.34172 0",
        "v  -5.7735 5.7735 5.7735",
        "v  5.7735 5.7735 5.7735",
        "v  9.34172 0 3.56822",
        "v  5.7735 5.7735 -5.7735",
        "v  5.7735 5.7735 -5.7735",
        "v  3.56822 9.34172 0",
        "v  5.7735 5.7735 5.7735",
        "v  9.34172 0 3.56822",
        "v  9.34172 0 -3.56822",
        "v  5.7735 5.7735 -5.7735",
        "v  5.7735 5.7735 5.7735",
        "v  0 3.56822 9.34172",
        "v  5.7735 -5.7735 5.7735",
        "v  5.7735 -5.7735 5.7735",
        "v  9.34172 0 3.56822",
        "v  5.7735 5.7735 5.7735",
        "v  0 3.56822 9.34172",
        "v  0 -3.56822 9.34172",
        "v  5.7735 -5.7735 5.7735",
        "v  3.56822 9.34172 0",
        "v  5.7735 5.7735 -5.7735",
        "v  -5.7735 5.7735 -5.7735",
        "v  -5.7735 5.7735 -5.7735",
        "v  -3.56822 9.34172 0",
        "v  3.56822 9.34172 0",
        "v  5.7735 5.7735 -5.7735",
        "v  0 3.56822 -9.34172",
        "v  -5.7735 5.7735 -5.7735",
        "v  9.34172 0 3.56822",
        "v  5.7735 -5.7735 5.7735",
        "v  5.7735 -5.7735 -5.7735",
        "v  5.7735 -5.7735 -5.7735",
        "v  9.34172 0 -3.56822",
        "v  9.34172 0 3.56822",
        "v  5.7735 -5.7735 5.7735",
        "v  3.56822 -9.34172 0",
        "v  5.7735 -5.7735 -5.7735",
        "v  0 3.56822 9.34172",
        "v  -5.7735 5.7735 5.7735",
        "v  -5.7735 -5.7735 5.7735",
        "v  -5.7735 -5.7735 5.7735",
        "v  0 -3.56822 9.34172",
        "v  0 3.56822 9.34172",
        "v  -5.7735 5.7735 5.7735",
        "v  -9.34172 0 3.56822",
        "v  -5.7735 -5.7735 5.7735",
        "v  -3.56822 9.34172 0",
        "v  -5.7735 5.7735 -5.7735",
        "v  -9.34172 0 3.56822",
        "v  -9.34172 0 3.56822",
        "v  -5.7735 5.7735 5.7735",
        "v  -3.56822 9.34172 0",
        "v  -5.7735 5.7735 -5.7735",
        "v  -9.34172 0 -3.56822",
        "v  -9.34172 0 3.56822",
        "v  -5.7735 -5.7735 5.7735",
        "v  -3.56822 -9.34172 0",
        "v  5.7735 -5.7735 5.7735",
        "v  5.7735 -5.7735 5.7735",
        "v  0 -3.56822 9.34172",
        "v  -5.7735 -5.7735 5.7735",
        "v  -3.56822 -9.34172 0",
        "v  3.56822 -9.34172 0",
        "v  5.7735 -5.7735 5.7735",
        "v  5.7735 -5.7735 -5.7735",
        "v  0 -3.56822 -9.34172",
        "v  5.7735 5.7735 -5.7735",
        "v  5.7735 5.7735 -5.7735",
        "v  9.34172 0 -3.56822",
        "v  5.7735 -5.7735 -5.7735",
        "v  0 -3.56822 -9.34172",
        "v  0 3.56822 -9.34172",
        "v  5.7735 5.7735 -5.7735",
        "v  -5.7735 -5.7735 -5.7735",
        "v  -9.34172 0 -3.56822",
        "v  0 3.56822 -9.34172",
        "v  0 3.56822 -9.34172",
        "v  0 -3.56822 -9.34172",
        "v  -5.7735 -5.7735 -5.7735",
        "v  -9.34172 0 -3.56822",
        "v  -5.7735 5.7735 -5.7735",
        "v  0 3.56822 -9.34172",
        "v  -5.7735 -5.7735 -5.7735",
        "v  -3.56822 -9.34172 0",
        "v  -9.34172 0 3.56822",
        "v  -9.34172 0 3.56822",
        "v  -9.34172 0 -3.56822",
        "v  -5.7735 -5.7735 -5.7735",
        "v  -3.56822 -9.34172 0",
        "v  -5.7735 -5.7735 5.7735",
        "v  -9.34172 0 3.56822",
        "v  -5.7735 -5.7735 -5.7735",
        "v  0 -3.56822 -9.34172",
        "v  3.56822 -9.34172 0",
        "v  3.56822 -9.34172 0",
        "v  -3.56822 -9.34172 0",
        "v  -5.7735 -5.7735 -5.7735",
        "v  0 -3.56822 -9.34172",
        "v  5.7735 -5.7735 -5.7735",
        "v  3.56822 -9.34172 0",
        "",
        "# Mesh '<STL_BINARY>' with 36 faces",
        "g <STL_BINARY>",
        "usemtl DefaultMaterial",
        "f  1//1 2//2 3//3",
        "f  4//4 5//5 6//6",
        "f  7//7 8//8 9//9",
        "f  10//10 11//11 12//12",
        "f  13//13 14//14 15//15",
        "f  16//16 17//17 18//18",
        "f  19//19 20//20 21//21",
        "f  22//22 23//23 24//24",
        "f  25//25 26//26 27//27",
        "f  28//28 29//29 30//30",
        "f  31//31 32//32 33//33",
        "f  34//34 35//35 36//36",
        "f  37//37 38//38 39//39",
        "f  40//40 41//41 42//42",
        "f  43//43 44//44 45//45",
        "f  46//46 47//47 48//48",
        "f  49//49 50//50 51//51",
        "f  52//52 53//53 54//54",
        "f  55//55 56//56 57//57",
        "f  58//58 59//59 60//60",
        "f  61//61 62//62 63//63",
        "f  64//64 65//65 66//66",
        "f  67//67 68//68 69//69",
        "f  70//70 71//71 72//72",
        "f  73//73 74//74 75//75",
        "f  76//76 77//77 78//78",
        "f  79//79 80//80 81//81",
        "f  82//82 83//83 84//84",
        "f  85//85 86//86 87//87",
        "f  88//88 89//89 90//90",
        "f  91//91 92//92 93//93",
        "f  94//94 95//95 96//96",
        "f  97//97 98//98 99//99",
        "f  100//100 101//101 102//102",
        "f  103//103 104//104 105//105",
        "f  106//106 107//107 108//108"
      ]
      let icosahedron = [
        "v  0 0 10",
        "v  -1.64304e-15 -8.94427 4.47214",
        "v  8.50651 -2.76393 4.47214",
        "v  0 0 10",
        "v  8.50651 -2.76393 4.47214",
        "v  5.25731 7.23607 4.47214",
        "v  0 0 10",
        "v  5.25731 7.23607 4.47214",
        "v  -5.25731 7.23607 4.47214",
        "v  0 0 10",
        "v  -5.25731 7.23607 4.47214",
        "v  -8.50651 -2.76393 4.47214",
        "v  0 0 10",
        "v  -8.50651 -2.76393 4.47214",
        "v  -1.64304e-15 -8.94427 4.47214",
        "v  -1.64304e-15 -8.94427 4.47214",
        "v  5.25731 -7.23607 -4.47214",
        "v  8.50651 -2.76393 4.47214",
        "v  8.50651 -2.76393 4.47214",
        "v  5.25731 -7.23607 -4.47214",
        "v  8.50651 2.76393 -4.47214",
        "v  8.50651 -2.76393 4.47214",
        "v  8.50651 2.76393 -4.47214",
        "v  5.25731 7.23607 4.47214",
        "v  5.25731 7.23607 4.47214",
        "v  8.50651 2.76393 -4.47214",
        "v  5.47679e-16 8.94427 -4.47214",
        "v  5.25731 7.23607 4.47214",
        "v  5.47679e-16 8.94427 -4.47214",
        "v  -5.25731 7.23607 4.47214",
        "v  -5.25731 7.23607 4.47214",
        "v  5.47679e-16 8.94427 -4.47214",
        "v  -8.50651 2.76393 -4.47214",
        "v  -5.25731 7.23607 4.47214",
        "v  -8.50651 2.76393 -4.47214",
        "v  -8.50651 -2.76393 4.47214",
        "v  -8.50651 -2.76393 4.47214",
        "v  -8.50651 2.76393 -4.47214",
        "v  -5.25731 -7.23607 -4.47214",
        "v  -8.50651 -2.76393 4.47214",
        "v  -5.25731 -7.23607 -4.47214",
        "v  -1.64304e-15 -8.94427 4.47214",
        "v  -1.64304e-15 -8.94427 4.47214",
        "v  -5.25731 -7.23607 -4.47214",
        "v  5.25731 -7.23607 -4.47214",
        "v  5.25731 -7.23607 -4.47214",
        "v  -1.22465e-15 1.49976e-31 -10",
        "v  8.50651 2.76393 -4.47214",
        "v  8.50651 2.76393 -4.47214",
        "v  -1.22465e-15 1.49976e-31 -10",
        "v  5.47679e-16 8.94427 -4.47214",
        "v  5.47679e-16 8.94427 -4.47214",
        "v  -1.22465e-15 1.49976e-31 -10",
        "v  -8.50651 2.76393 -4.47214",
        "v  -8.50651 2.76393 -4.47214",
        "v  -1.22465e-15 1.49976e-31 -10",
        "v  -5.25731 -7.23607 -4.47214",
        "v  -5.25731 -7.23607 -4.47214",
        "v  -1.22465e-15 1.49976e-31 -10",
        "v  5.25731 -7.23607 -4.47214",
        "",
        "# Mesh '<STL_BINARY>' with 20 faces",
        "g <STL_BINARY>",
        "usemtl DefaultMaterial",
        "f  1//1 2//2 3//3",
        "f  4//4 5//5 6//6",
        "f  7//7 8//8 9//9",
        "f  10//10 11//11 12//12",
        "f  13//13 14//14 15//15",
        "f  16//16 17//17 18//18",
        "f  19//19 20//20 21//21",
        "f  22//22 23//23 24//24",
        "f  25//25 26//26 27//27",
        "f  28//28 29//29 30//30",
        "f  31//31 32//32 33//33",
        "f  34//34 35//35 36//36",
        "f  37//37 38//38 39//39",
        "f  40//40 41//41 42//42",
        "f  43//43 44//44 45//45",
        "f  46//46 47//47 48//48",
        "f  49//49 50//50 51//51",
        "f  52//52 53//53 54//54",
        "f  55//55 56//56 57//57",
        "f  58//58 59//59 60//60"
      ]
      let octahedron = [
        "# 24 vertex positions",
        "v  0 0 10",
        "v  6.12323e-16 10 6.12323e-16",
        "v  -10 1.22465e-15 6.12323e-16",
        "v  0 0 10",
        "v  -10 1.22465e-15 6.12323e-16",
        "v  -1.83697e-15 -10 6.12323e-16",
        "v  0 0 10",
        "v  -1.83697e-15 -10 6.12323e-16",
        "v  10 0 6.12323e-16",
        "v  0 0 10",
        "v  10 0 6.12323e-16",
        "v  6.12323e-16 10 6.12323e-16",
        "v  6.12323e-16 10 6.12323e-16",
        "v  -1.22465e-15 1.49976e-31 -10",
        "v  -10 1.22465e-15 6.12323e-16",
        "v  -10 1.22465e-15 6.12323e-16",
        "v  -1.22465e-15 1.49976e-31 -10",
        "v  -1.83697e-15 -10 6.12323e-16",
        "v  -1.83697e-15 -10 6.12323e-16",
        "v  -1.22465e-15 1.49976e-31 -10",
        "v  10 0 6.12323e-16",
        "v  10 0 6.12323e-16",
        "v  -1.22465e-15 1.49976e-31 -10",
        "v  6.12323e-16 10 6.12323e-16",
        "",
        "# Mesh '<STL_BINARY>' with 8 faces",
        "g <STL_BINARY>",
        "usemtl DefaultMaterial",
        "f  1//1 2//2 3//3",
        "f  4//4 5//5 6//6",
        "f  7//7 8//8 9//9",
        "f  10//10 11//11 12//12",
        "f  13//13 14//14 15//15",
        "f  16//16 17//17 18//18",
        "f  19//19 20//20 21//21",
        "f  22//22 23//23 24//24"
      ]
      let tetrahedron = [
        "# 12 vertex positions",
        "v  0 0 10",
        "v  -1.73191e-15 -9.42809 -3.33333",
        "v  8.16497 4.71405 -3.33333",
        "v  0 0 10",
        "v  8.16497 4.71405 -3.33333",
        "v  -8.16497 4.71405 -3.33333",
        "v  0 0 10",
        "v  -8.16497 4.71405 -3.33333",
        "v  -1.73191e-15 -9.42809 -3.33333",
        "v  -1.73191e-15 -9.42809 -3.33333",
        "v  -8.16497 4.71405 -3.33333",
        "v  8.16497 4.71405 -3.33333",
        "",
        "# Mesh '<STL_BINARY>' with 4 faces",
        "g <STL_BINARY>",
        "usemtl DefaultMaterial",
        "f  1//1 2//2 3//3",
        "f  4//4 5//5 6//6",
        "f  7//7 8//8 9//9",
        "f  10//10 11//11 12//12"
      ]
    </script>
  </head>
  <body>
    <h5 style="position:fixed; top: 0px; left: 16px;"><%= title %></h5>
    <h5 style="position:fixed; top: 18px; left: 16px;">v: <%= model %></h5>
    <h5 style="position:fixed; top: 36px; left: 16px;">i: <%= iteration %> l: <%= loss %></h5>
    <h5 style="position:fixed; top: 54px; left: 16px;">s: <%= shape.name %>, <%= shape.val %></h5>
  </body>
</html>